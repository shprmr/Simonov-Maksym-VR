

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec2 texture;
varying vec2 tex;
uniform mat4 ModelViewMatrix, ProjectionMatrix;

void main() {
    tex=texture;
    vec4 vertexMV = ModelViewMatrix * vec4(vertex,1.0);
    gl_Position = ProjectionMatrix * vertexMV;
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
varying vec2 tex;
uniform sampler2D tmu;
void main() {
    gl_FragColor = color;
    if((color.x+color.y+color.z)<0.1){
        vec4 texColor = texture2D(tmu, tex);
        gl_FragColor =texColor;
    }
    
}`;